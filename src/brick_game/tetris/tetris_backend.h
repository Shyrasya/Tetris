#ifndef BACKEND_H
#define BACKEND_H

#include <ncurses.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "defines.h"
#include "objects.h"

/**
 * @brief Массив, содержащий шаблоны 4*4 всех возможных фигур в игре (0 - пусто,
 * 1 - заполнено)
 */
static const int figures[9][QUADR][QUADR] = {
    {{0, 0, 0, 0}, {1, 0, 0, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}},  // J
    {{0, 0, 0, 0}, {0, 0, 1, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}},  // L
    {{0, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}},  // T
    {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {1, 1, 0, 0}},  // S
    {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 1, 0}},  // Z
    {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 0, 0}, {1, 1, 0, 0}},  // O
    {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}},  // I horiz 1
    {{0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}},  // I vert 2
    {{0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}}   // I vert 4
};

/**
 * @brief Структура, содержащая названия всех возможных фигур в игре
 */
typedef enum { J, L, T, S, Z, O, I, MAX_RAND } FigName_t;

/**
 * @brief Функция для начального выделения памяти под поле и следующую игровую
 * фигуру
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @return Код выделения памяти (0 - успешно, 1 - нет)
 */
int statist_init(GameInfo_t *statist);

/**
 * @brief Функция для инициализации стартовой информации об игре (очки, уровень,
 * скорость, пауза)
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param code Код результата функции statist_init
 */
void success_init(GameInfo_t *statist, int *code);

/**
 * @brief Функция для очищения памяти под поле, следующую игровую фигуру,
 * обнуление информации об игре (очки, уровень, скорость, пауза)
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 */
void statist_close(GameInfo_t *statist);

/**
 * @brief Функция для чтения файла с максимально набранным счетом
 * @param high Переменная, куда запишется максимальный счет с файла
 * @return Код чтения файла со счетом-рекордом (0 - успешно, 1 - нет)
 */
int read_high_score(int *high);

/**
 * @brief Функция для записи нового счета-рекорда в файл
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @return Код перезаписи файла со счетом-рекордом (0 - успешно, 1 - нет)
 */
int write_high_score(GameInfo_t *statist);

/**
 * @brief Функция для инициализации первой фигуры в текущей игре
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 * @param help Вспомогательная структура для учета положения фигуры при событиях
 */
void first_fig_init(GameInfo_t *statist, PlayerPos_t *figure_info,
                    HelpVar_t *help);

/**
 * @brief Функция для заполнения переноски шаблона 4*4 текущей фигуры следующей
 * фигурой
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 */
void pattern_fill(GameInfo_t *statist, PlayerPos_t *figure_info);

/**
 * @brief Функция для переноса фигуры из переноски шаблона 4*4 в поле-массив
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 * @param help Вспомогательная структура для учета положения фигуры при событиях
 * @return Код переноса фигуры на поле (0 - успешно, 1 - нет)
 */
int cube_to_field(GameInfo_t *statist, PlayerPos_t *figure_info,
                  HelpVar_t *help);

/**
 * @brief Вспомогательная функция cube_to_field для проверки поля перед
 * переносом
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 * @param r Текущий проверяемый ряд поля
 * @param r Текущий проверяемый столбец поля
 * @param help Вспомогательная структура для учета положения фигуры при событиях
 * @return Код проверки поля и дальнейшего переноса (0 - успешно, 1 - нет)
 */
int check_cube_to_field(GameInfo_t *statist, PlayerPos_t *figure_info, int r,
                        int c, HelpVar_t *help);

/**
 * @brief Функция очищения переноски шаблона 4*4 в 0
 * @param figure_info Структура с состоянием игровой фигуры
 */
void clean_carry_cube(PlayerPos_t *figure_info);

/**
 * @brief Функция очищения поля из 1 в 0
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 */
void clear_cubofield(GameInfo_t *statist, PlayerPos_t *figure_info);

/**
 * @brief Функция поворота по часовой стрелке переноски шаблона 4*4 (кроме
 * фигуры I)
 * @param figure_info Структура с состоянием игровой фигуры
 */
void matrix_clockwise(PlayerPos_t *figure_info);

/**
 * @brief Функция поворота по часовой стрелке переноски шаблона 4*4 фигуры I
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 * @param help Вспомогательная структура для учета положения фигуры при событиях
 */
void line_clockwise(GameInfo_t *statist, PlayerPos_t *figure_info,
                    HelpVar_t *help);

/**
 * @brief Функция копирования переноски шаблона 4*4 во временный массив
 * @param temp_cube Указатель на временный массив
 * @param figure_info Структура с состоянием игровой фигуры
 */
void copy_cube_to_temp(int (*temp_cube)[QUADR], PlayerPos_t *figure_info);

/**
 * @brief Функция копирования временного массива в переноску шаблон 4*4
 * @param figure_info Структура с состоянием игровой фигуры
 * @param temp_cube Указатель на временный массив
 */
void copy_temp_to_cube(PlayerPos_t *figure_info, int (*temp_cube)[QUADR]);

/**
 * @brief Функция финального очищения поля из 1 и 2 в 0
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 */
void clear_gameovr_field(GameInfo_t *statist);

/**
 * @brief Функция проверки заполненности рядов после прикрепления фигуры
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 */
void check_full_lines(GameInfo_t *statist);

/**
 * @brief Функция обновления счета и скорости в соответствии с количеством
 * заполненных строчек
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param rows Количество заполненных строчек из check_full_lines
 */
void new_score_set(GameInfo_t *statist, int rows);

/**
 * @brief Функция генерации новой фигуры и заполения массива next
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @return Номер новой сгенерированной фигуры из списка всех возможных фигур
 */
int next_gen(GameInfo_t *statist);

/**
 * @brief Функция переноса перевернутого шаблона-фигуры I в переноску шаблон 4*4
 * @param figure_info Структура с состоянием игровой фигуры
 * @param line_fig Номер фигуры I (из 3х возможных: 6, 7, 8) в списке всех фигур
 */
void clockwise_fill(PlayerPos_t *figure_info, int line_fig);

/**
 * @brief Функция возврата фигуры в прошлую координату и очистка поля от
 * переноски шаблона 4*4 при невозможном повороте
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 * @param help Вспомогательная структура для учета положения фигуры при событиях
 */
void error_rotate(GameInfo_t *statist, PlayerPos_t *figure_info,
                  HelpVar_t *help);

/**
 * @brief Функция проверки на возможность прикрепления фигуры и дальнейшего
 * продолжения игры
 * @param statist Структура с текущим состоянием поля, шаблоном следующей
 * фигуры, очков и т.п.
 * @param figure_info Структура с состоянием игровой фигуры
 * @return Возможно ли продолжать дальше игру и генерировать следующую фигуру?
 * Нет помех? 0 - да, 1 - нет
 */
int check_attach(GameInfo_t *statist, PlayerPos_t *figure_info);

#endif
